/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goriƒçar
 * Copyright 2019-2020. MIT licensed.
 */
document.addEventListener("DOMContentLoaded",function(){function e(){if(document.querySelector(".compilation")){let e,t,i=document.querySelectorAll(".item");window.innerWidth<=1024&&window.innerWidth<window.innerHeight?(e=i[0].querySelector(".item_image").offsetWidth,t=e/141*212,Array.prototype.forEach.call(i,function(e){console.log(e),e.querySelector(".item_image").style.height=t+"px"})):(e=i[0].offsetWidth,t=e/141*212,Array.prototype.forEach.call(i,function(e){console.log(e),e.querySelector(".item_image").style.height=t+"px"}))}if(document.querySelector(".article")){let e,t,i=document.querySelector(".article_image");window.innerWidth<=1024&&window.innerWidth<window.innerHeight?(i.style.width="inherit",i.style.height="inherit",t=i.offsetWidth,e=i.offsetHeight,console.log(e,t),i.nextElementSibling.style.paddingLeft=0,i.style.height=e+"px",i.nextElementSibling.querySelector(".header").style.marginBottom=e+"px"):window.innerWidth>1024&&window.innerWidth>window.innerHeight?(i.style.width="inherit",i.style.height="inherit",t=(e=i.offsetHeight)/212*141,i.nextElementSibling.querySelector(".header").style.marginBottom="inherit",i.style.width=t+"px",i.nextElementSibling.style.paddingLeft=t+64+"px"):(i.style.width="inherit",i.style.height="inherit",e=i.offsetHeight,t=i.offsetWidth,i.nextElementSibling.querySelector(".header").style.marginBottom="inherit",i.style.width=t+"px",i.nextElementSibling.style.paddingLeft=t+48+"px")}document.querySelector("#copyLink")&&document.querySelector("#copyLink").addEventListener("click",()=>{let e=document.createElement("input"),t=window.location.href;document.body.appendChild(e),e.value=t,e.select(),document.execCommand("copy"),document.body.removeChild(e)})}new e,window.onresize=e});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiU3RhcnRTY3JpcHRzIiwicXVlcnlTZWxlY3RvciIsIml0ZW1XaWR0aCIsImltYWdlSGVpZ2h0IiwiaXRlbXNPblBhZ2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwib2Zmc2V0V2lkdGgiLCJBcnJheSIsInByb3RvdHlwZSIsImZvckVhY2giLCJjYWxsIiwiZWxlbSIsImNvbnNvbGUiLCJsb2ciLCJzdHlsZSIsImhlaWdodCIsImltYWdlV2lkdGgiLCJhcnRpY2xlSW1hZ2UiLCJ3aWR0aCIsIm9mZnNldEhlaWdodCIsIm5leHRFbGVtZW50U2libGluZyIsInBhZGRpbmdMZWZ0IiwibWFyZ2luQm90dG9tIiwiZHVtbXkiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImxvY2F0aW9uIiwiaHJlZiIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInZhbHVlIiwic2VsZWN0IiwiZXhlY0NvbW1hbmQiLCJyZW1vdmVDaGlsZCIsIm9ucmVzaXplIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBQSxTQUFBQyxpQkFBQSxtQkFBQSxXQUNBLFNBQUFDLElBRUEsR0FBQUYsU0FBQUcsY0FBQSxnQkFBQSxDQUNBLElBQUFDLEVBQUFDLEVBQUFDLEVBQUFOLFNBQUFPLGlCQUFBLFNBQ0FDLE9BQUFDLFlBQUEsTUFBQUQsT0FBQUMsV0FBQUQsT0FBQUUsYUFDQU4sRUFBQUUsRUFBQSxHQUFBSCxjQUFBLGVBQUFRLFlBUEFOLEVBQUEsRUFBQSxJQUFBLElBQ0FPLE1BQUFDLFVBQUFDLFFBQUFDLEtBQUFULEVBQUEsU0FBQVUsR0FDQUMsUUFBQUMsSUFBQUYsR0FDQUEsRUFBQWIsY0FBQSxlQUNBZ0IsTUFBQUMsT0FBQWYsRUFBQSxTQUdBRCxFQUFBRSxFQUFBLEdBQUFLLFlBQ0FOLEVBQUEsRUFBQSxJQUFBLElBQ0FPLE1BQUFDLFVBQUFDLFFBQUFDLEtBQUFULEVBQUEsU0FBQVUsR0FDQUMsUUFBQUMsSUFBQUYsR0FDQUEsRUFBQWIsY0FBQSxlQUNBZ0IsTUFBQUMsT0FBQWYsRUFBQSxRQUtBLEdBQUFMLFNBQUFHLGNBQUEsWUFBQSxDQUNBLElBQ0FFLEVBQUFnQixFQURBQyxFQUFBdEIsU0FBQUcsY0FBQSxrQkFFQUssT0FBQUMsWUFBQSxNQUFBRCxPQUFBQyxXQUFBRCxPQUFBRSxhQUNBWSxFQUFBSCxNQUFBSSxNQUFBLFVBQ0FELEVBQUFILE1BQUFDLE9BQUEsVUFDQUMsRUFBQUMsRUFBQVgsWUFDQU4sRUFBQWlCLEVBQUFFLGFBQ0FQLFFBQUFDLElBQUFiLEVBQUFnQixHQUNBQyxFQUFBRyxtQkFBQU4sTUFBQU8sWUFBQSxFQUNBSixFQUFBSCxNQUFBQyxPQUFBZixFQUFBLEtBQ0FpQixFQUFBRyxtQkFBQXRCLGNBQUEsV0FBQWdCLE1BQUFRLGFBQUF0QixFQUFBLE1BQ0FHLE9BQUFDLFdBQUEsTUFBQUQsT0FBQUMsV0FBQUQsT0FBQUUsYUFDQVksRUFBQUgsTUFBQUksTUFBQSxVQUNBRCxFQUFBSCxNQUFBQyxPQUFBLFVBRUFDLEdBREFoQixFQUFBaUIsRUFBQUUsY0FDQSxJQUFBLElBQ0FGLEVBQUFHLG1CQUFBdEIsY0FBQSxXQUFBZ0IsTUFBQVEsYUFBQSxVQUNBTCxFQUFBSCxNQUFBSSxNQUFBRixFQUFBLEtBQ0FDLEVBQUFHLG1CQUFBTixNQUFBTyxZQUFBTCxFQUFBLEdBQUEsT0FFQUMsRUFBQUgsTUFBQUksTUFBQSxVQUNBRCxFQUFBSCxNQUFBQyxPQUFBLFVBQ0FmLEVBQUFpQixFQUFBRSxhQUNBSCxFQUFBQyxFQUFBWCxZQUNBVyxFQUFBRyxtQkFBQXRCLGNBQUEsV0FBQWdCLE1BQUFRLGFBQUEsVUFDQUwsRUFBQUgsTUFBQUksTUFBQUYsRUFBQSxLQUNBQyxFQUFBRyxtQkFBQU4sTUFBQU8sWUFBQUwsRUFBQSxHQUFBLE1BR0FyQixTQUFBRyxjQUFBLGNBQ0FILFNBQUFHLGNBQUEsYUFBQUYsaUJBQUEsUUFBQSxLQUNBLElBQUEyQixFQUFBNUIsU0FBQTZCLGNBQUEsU0FDQUMsRUFBQXRCLE9BQUF1QixTQUFBQyxLQUVBaEMsU0FBQWlDLEtBQUFDLFlBQUFOLEdBQ0FBLEVBQUFPLE1BQUFMLEVBQ0FGLEVBQUFRLFNBQ0FwQyxTQUFBcUMsWUFBQSxRQUNBckMsU0FBQWlDLEtBQUFLLFlBQUFWLEtBS0EsSUFBQTFCLEVBRUFNLE9BQUErQixTQUFBckMiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyDQkNC90LDQu9C+0LMgJChkb2N1bWVudCkucmVhZHkoKVxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBTdGFydFNjcmlwdHMoKSB7XG5cbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbXBpbGF0aW9uJykpIHtcbiAgICAgIGxldCBpdGVtc09uUGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pdGVtJyksIGl0ZW1XaWR0aCwgaW1hZ2VIZWlnaHQ7XG4gICAgICBpZiAoKHdpbmRvdy5pbm5lcldpZHRoIDw9IDEwMjQpICYmICh3aW5kb3cuaW5uZXJXaWR0aCA8IHdpbmRvdy5pbm5lckhlaWdodCkpIHsgLy9wb3J0cmFpdFxuICAgICAgICBpdGVtV2lkdGggPSBpdGVtc09uUGFnZVswXS5xdWVyeVNlbGVjdG9yKCcuaXRlbV9pbWFnZScpLm9mZnNldFdpZHRoO1xuICAgICAgICBpbWFnZUhlaWdodCA9IChpdGVtV2lkdGgpIC8gMTQxICogMjEyO1xuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGl0ZW1zT25QYWdlLCBmdW5jdGlvbihlbGVtKXtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlbGVtKTtcbiAgICAgICAgICBsZXQgaW1hZ2UgPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy5pdGVtX2ltYWdlJyk7XG4gICAgICAgICAgaW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKyAncHgnO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1XaWR0aCA9IGl0ZW1zT25QYWdlWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICBpbWFnZUhlaWdodCA9IChpdGVtV2lkdGgpIC8gMTQxICogMjEyO1xuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGl0ZW1zT25QYWdlLCBmdW5jdGlvbihlbGVtKXtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlbGVtKTtcbiAgICAgICAgICBsZXQgaW1hZ2UgPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy5pdGVtX2ltYWdlJyk7XG4gICAgICAgICAgaW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKyAncHgnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFydGljbGUnKSkge1xuICAgICAgbGV0IGFydGljbGVJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnRpY2xlX2ltYWdlJyksXG4gICAgICAgICAgaW1hZ2VIZWlnaHQsIGltYWdlV2lkdGg7XG4gICAgICBpZiAoICh3aW5kb3cuaW5uZXJXaWR0aCA8PSAxMDI0KSAmJiAod2luZG93LmlubmVyV2lkdGggPCB3aW5kb3cuaW5uZXJIZWlnaHQpICkgeyAvL3BvcnRyYWl0XG4gICAgICAgIGFydGljbGVJbWFnZS5zdHlsZS53aWR0aCA9ICdpbmhlcml0JztcbiAgICAgICAgYXJ0aWNsZUltYWdlLnN0eWxlLmhlaWdodCA9ICdpbmhlcml0JztcbiAgICAgICAgaW1hZ2VXaWR0aCA9IGFydGljbGVJbWFnZS5vZmZzZXRXaWR0aDtcbiAgICAgICAgaW1hZ2VIZWlnaHQgPSBhcnRpY2xlSW1hZ2Uub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBjb25zb2xlLmxvZyhpbWFnZUhlaWdodCwgaW1hZ2VXaWR0aCk7XG4gICAgICAgIGFydGljbGVJbWFnZS5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUucGFkZGluZ0xlZnQgPSAwO1xuICAgICAgICBhcnRpY2xlSW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKyAncHgnO1xuICAgICAgICBhcnRpY2xlSW1hZ2UubmV4dEVsZW1lbnRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKS5zdHlsZS5tYXJnaW5Cb3R0b20gPSBpbWFnZUhlaWdodCArICdweCc7XG4gICAgICB9IGVsc2UgaWYgKCh3aW5kb3cuaW5uZXJXaWR0aCA+IDEwMjQpICYmICh3aW5kb3cuaW5uZXJXaWR0aCA+IHdpbmRvdy5pbm5lckhlaWdodCkpIHsgLy9sYW5kc2NhcGVcbiAgICAgICAgYXJ0aWNsZUltYWdlLnN0eWxlLndpZHRoID0gJ2luaGVyaXQnO1xuICAgICAgICBhcnRpY2xlSW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gJ2luaGVyaXQnO1xuICAgICAgICBpbWFnZUhlaWdodCA9IGFydGljbGVJbWFnZS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGltYWdlV2lkdGggPSAoaW1hZ2VIZWlnaHQpIC8gMjEyICogMTQxO1xuICAgICAgICBhcnRpY2xlSW1hZ2UubmV4dEVsZW1lbnRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnaW5oZXJpdCc7XG4gICAgICAgIGFydGljbGVJbWFnZS5zdHlsZS53aWR0aCA9IGltYWdlV2lkdGggKyAncHgnO1xuICAgICAgICBhcnRpY2xlSW1hZ2UubmV4dEVsZW1lbnRTaWJsaW5nLnN0eWxlLnBhZGRpbmdMZWZ0ID0gKGltYWdlV2lkdGggKyA2NCkgKyAncHgnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJ0aWNsZUltYWdlLnN0eWxlLndpZHRoID0gJ2luaGVyaXQnO1xuICAgICAgICBhcnRpY2xlSW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gJ2luaGVyaXQnO1xuICAgICAgICBpbWFnZUhlaWdodCA9IGFydGljbGVJbWFnZS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGltYWdlV2lkdGggPSBhcnRpY2xlSW1hZ2Uub2Zmc2V0V2lkdGg7XG4gICAgICAgIGFydGljbGVJbWFnZS5uZXh0RWxlbWVudFNpYmxpbmcucXVlcnlTZWxlY3RvcignLmhlYWRlcicpLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICdpbmhlcml0JztcbiAgICAgICAgYXJ0aWNsZUltYWdlLnN0eWxlLndpZHRoID0gaW1hZ2VXaWR0aCArICdweCc7XG4gICAgICAgIGFydGljbGVJbWFnZS5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUucGFkZGluZ0xlZnQgPSAoaW1hZ2VXaWR0aCArIDQ4KSArICdweCc7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29weUxpbmsnKSkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvcHlMaW5rJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGxldCBkdW1teSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JyksXG4gICAgICAgICAgICB0ZXh0ID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkdW1teSk7XG4gICAgICAgIGR1bW15LnZhbHVlID0gdGV4dDtcbiAgICAgICAgZHVtbXkuc2VsZWN0KCk7XG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZHVtbXkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmV3IFN0YXJ0U2NyaXB0cygpO1xuXG4gIHdpbmRvdy5vbnJlc2l6ZSA9IFN0YXJ0U2NyaXB0cztcbn0pO1xuXG5cbi8vIC8vINCV0YHQu9C4INC00L7Qu9C20LXQvSDQsdGL0YLRjCDQvdCw0LnQtNC10L0g0L7QtNC40L0g0Y3Qu9C10LzQtdC90YJcbi8vIGlmKChlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtXCIpKSAhPT0gbnVsbClcbi8vICAgZS5jbGFzc0xpc3QuYWRkKCdsYXN0Jyk7IC8vINCQ0L3QsNC70L7QsyDQstGL0LHQvtGA0LrQuCDQuCDQv9GA0LjRgdCy0L7QtdC90LjRjyDQutC70LDRgdGB0LBcbi8vIC8vINCV0YHQu9C4INGN0LvQtdC80LXQvdGC0L7QsiDQsdGD0LTQtdGCINC80L3QvtCz0L5cbi8vIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNmb3JtXCIpLCBmdW5jdGlvbihlKXtcbi8vICAgZS5jbGFzc0xpc3QuYWRkKCdsYXN0Jyk7XG4vLyB9KTtcbiJdfQ==
