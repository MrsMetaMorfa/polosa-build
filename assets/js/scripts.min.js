/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goriƒçar
 * Copyright 2019-2020. MIT licensed.
 */
document.addEventListener("DOMContentLoaded",function(){const e=document.querySelectorAll(".header_tags .tag");let t,o,n=[];function c(){if(document.querySelector(".compilation")){let e,t,o=document.querySelectorAll(".item");window.innerWidth<=1024&&window.innerWidth<window.innerHeight&&(e=o[0].querySelector(".item_image").offsetWidth,t=(e-40)/141*212,Array.prototype.forEach.call(o,function(e){e.querySelector(".item_image").style.height=t+"px"}))}function c(e,t){t.onclick=(()=>new function(){e.classList.toggle("open")})}if(document.querySelector("#copyLink")&&document.querySelector("#copyLink").addEventListener("click",()=>{let e=document.createElement("input"),t=window.location.href;document.body.appendChild(e),e.value=t,e.select(),document.execCommand("copy"),document.body.removeChild(e)}),document.querySelector(".header_tags")){let c=document.querySelector(".header_tags"),l=document.querySelector(".header_tags .tag_list"),i=document.querySelector(".header_tags .tag-wrapper"),a=0,s=c.offsetWidth,u=i.offsetWidth,d=0,y=Array.prototype.slice.call(e),f=n.slice();function r(e){if(d=u-24,document.querySelector(".header_tags .tag.current"))do{d+=f[e],e++}while(d<=s-u-24-26&&e<y.length);else do{d+=f[e],e++}while(d<=s-u-24&&e<y.length);return e}a=r(a);let p=document.querySelectorAll(".header_tags .tag");if(t){if(o()>a){let e=f[o()];y.splice(o(),1),f.splice(o(),1);let n=a-1;y.splice(n,0,t),f.splice(n,0,e)}a=r(a=0)}Array.prototype.forEach.call(p,function(e){e.remove()});for(let e=0;e<a;e++)i.before(y[e]);for(let e=a;e<y.length;e++)l.append(y[e]);c.style.flexWrap="nowrap"}if(document.querySelector(".header_tags")){const e=document.querySelector(".header_menu"),t=e.querySelector(".menu"),o=e.querySelector(".btn-icon");new c(t,o);const n=document.querySelector(".header_language"),r=n.querySelector(".language"),l=n.querySelector(".btn-icon");new c(r,l);const i=document.querySelector(".header_notification"),a=i.querySelector(".notification"),s=i.querySelector(".btn-icon");new c(a,s);const u=document.querySelector(".header_tags .tag-wrapper"),d=u.querySelector(".tag_list"),y=u.querySelector(".tag-button");new c(d,y),document.onclick=(e=>{let n=e.target,c=n===t||t.contains(n),i=n===o,u=t.classList.contains("open"),f=n===r||r.contains(n),p=n===l,g=r.classList.contains("open"),m=n===a||a.contains(n),h=n===s,q=a.classList.contains("open"),S=n===d||d.contains(n),w=n===y,_=d.classList.contains("open");c||i||!u||t.classList.toggle("open"),f||p||!g||r.classList.toggle("open"),m||h||!q||a.classList.toggle("open"),S||w||!_||d.classList.toggle("open")})}let l=document.querySelector(".article_image"),i=l.offsetWidth;document.onscroll=function(){if(document.querySelector(".article")){let e=document.querySelector("section.article").offsetHeight,t=document.querySelector(".header").offsetHeight;pageYOffset>40&&pageYOffset<e+t-l.offsetHeight-100?(l.style.position="fixed",l.style.top="40px",l.style.bottom="auto",l.style.width=i+"px"):pageYOffset>40&&pageYOffset>e+t-l.offsetHeight-100?(l.style.position="absolute",l.style.top="auto",l.style.bottom="80px",l.style.width=i+"px"):(l.style.position="absolute",l.style.top="40px",l.style.bottom="auto",l.style.width=i+"px")}}}document.querySelector(".header_tags")&&(Array.prototype.forEach.call(e,function(e){n.push(e.offsetWidth+12)}),t=document.querySelector(".header_tags .tag.current"),o=function(){if(null!==t)return Array.prototype.slice.call(e).indexOf(t)}),new c,window.onresize=c});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
