/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goriƒçar
 * Copyright 2019-2020. MIT licensed.
 */
document.addEventListener("DOMContentLoaded",function(){function e(){if(document.querySelector(".compilation")){let e,t,o=document.querySelectorAll(".item");window.innerWidth<1024&&window.innerWidth<window.innerHeight?(e=o[0].querySelector(".item_image").offsetWidth,t=e/141*212,Array.prototype.forEach.call(o,function(e){console.log(e),e.querySelector(".item_image").style.height=t+"px"})):(e=o[0].offsetWidth,t=e/141*212,Array.prototype.forEach.call(o,function(e){console.log(e),e.querySelector(".item_image").style.height=t+"px"}))}if(document.querySelector(".article")){let e,t,o=document.querySelector(".article_image");window.innerWidth<1024&&window.innerWidth<window.innerHeight?(e=(t=o.offsetWidth)/141*212,console.log(e,t),o.style.height=e+"px",o.nextElementSibling.querySelector(".header").style.marginBottom=e+"px"):(t=(e=o.offsetHeight)/212*141,o.style.width=t+"px",o.nextElementSibling.style.left=t+"px")}document.querySelector("#copyLink")&&document.querySelector("#copyLink").addEventListener("click",()=>{let e=document.createElement("input"),t=window.location.href;document.body.appendChild(e),e.value=t,e.select(),document.execCommand("copy"),document.body.removeChild(e)})}new e,window.onresize=e});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiU3RhcnRTY3JpcHRzIiwicXVlcnlTZWxlY3RvciIsIml0ZW1XaWR0aCIsImltYWdlSGVpZ2h0IiwiaXRlbXNPblBhZ2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwib2Zmc2V0V2lkdGgiLCJBcnJheSIsInByb3RvdHlwZSIsImZvckVhY2giLCJjYWxsIiwiZWxlbSIsImNvbnNvbGUiLCJsb2ciLCJzdHlsZSIsImhlaWdodCIsImltYWdlV2lkdGgiLCJhcnRpY2xlSW1hZ2UiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJtYXJnaW5Cb3R0b20iLCJvZmZzZXRIZWlnaHQiLCJ3aWR0aCIsImxlZnQiLCJkdW1teSIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwibG9jYXRpb24iLCJocmVmIiwiYm9keSIsImFwcGVuZENoaWxkIiwidmFsdWUiLCJzZWxlY3QiLCJleGVjQ29tbWFuZCIsInJlbW92ZUNoaWxkIiwib25yZXNpemUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0FBLFNBQUFDLGlCQUFBLG1CQUFBLFdBQ0EsU0FBQUMsSUFDQSxHQUFBRixTQUFBRyxjQUFBLGdCQUFBLENBQ0EsSUFBQUMsRUFBQUMsRUFBQUMsRUFBQU4sU0FBQU8saUJBQUEsU0FDQUMsT0FBQUMsV0FBQSxNQUFBRCxPQUFBQyxXQUFBRCxPQUFBRSxhQUNBTixFQUFBRSxFQUFBLEdBQUFILGNBQUEsZUFBQVEsWUFDQU4sRUFBQSxFQUFBLElBQUEsSUFQQU8sTUFBQUMsVUFBQUMsUUFBQUMsS0FBQVQsRUFBQSxTQUFBVSxHQUNBQyxRQUFBQyxJQUFBRixHQUNBQSxFQUFBYixjQUFBLGVBQ0FnQixNQUFBQyxPQUFBZixFQUFBLFNBR0FELEVBQUFFLEVBQUEsR0FBQUssWUFDQU4sRUFBQSxFQUFBLElBQUEsSUFDQU8sTUFBQUMsVUFBQUMsUUFBQUMsS0FBQVQsRUFBQSxTQUFBVSxHQUNBQyxRQUFBQyxJQUFBRixHQUNBQSxFQUFBYixjQUFBLGVBQ0FnQixNQUFBQyxPQUFBZixFQUFBLFFBSUEsR0FBQUwsU0FBQUcsY0FBQSxZQUFBLENBQ0EsSUFDQUUsRUFBQWdCLEVBREFDLEVBQUF0QixTQUFBRyxjQUFBLGtCQUVBSyxPQUFBQyxXQUFBLE1BQUFELE9BQUFDLFdBQUFELE9BQUFFLGFBRUFMLEdBREFnQixFQUFBQyxFQUFBWCxhQUNBLElBQUEsSUFDQU0sUUFBQUMsSUFBQWIsRUFBQWdCLEdBQ0FDLEVBQUFILE1BQUFDLE9BQUFmLEVBQUEsS0FDQWlCLEVBQUFDLG1CQUFBcEIsY0FBQSxXQUFBZ0IsTUFBQUssYUFBQW5CLEVBQUEsT0FHQWdCLEdBREFoQixFQUFBaUIsRUFBQUcsY0FDQSxJQUFBLElBQ0FILEVBQUFILE1BQUFPLE1BQUFMLEVBQUEsS0FDQUMsRUFBQUMsbUJBQUFKLE1BQUFRLEtBQUFOLEVBQUEsTUFHQXJCLFNBQUFHLGNBQUEsY0FDQUgsU0FBQUcsY0FBQSxhQUFBRixpQkFBQSxRQUFBLEtBQ0EsSUFBQTJCLEVBQUE1QixTQUFBNkIsY0FBQSxTQUNBQyxFQUFBdEIsT0FBQXVCLFNBQUFDLEtBRUFoQyxTQUFBaUMsS0FBQUMsWUFBQU4sR0FDQUEsRUFBQU8sTUFBQUwsRUFDQUYsRUFBQVEsU0FDQXBDLFNBQUFxQyxZQUFBLFFBQ0FyQyxTQUFBaUMsS0FBQUssWUFBQVYsS0FLQSxJQUFBMUIsRUFFQU0sT0FBQStCLFNBQUFyQyIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vINCQ0L3QsNC70L7QsyAkKGRvY3VtZW50KS5yZWFkeSgpXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIFN0YXJ0U2NyaXB0cygpIHtcbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbXBpbGF0aW9uJykpIHtcbiAgICAgIGxldCBpdGVtc09uUGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pdGVtJyksIGl0ZW1XaWR0aCwgaW1hZ2VIZWlnaHQ7XG4gICAgICBpZiAoKHdpbmRvdy5pbm5lcldpZHRoIDwgMTAyNCkgJiYgKHdpbmRvdy5pbm5lcldpZHRoIDwgd2luZG93LmlubmVySGVpZ2h0KSkge1xuICAgICAgICBpdGVtV2lkdGggPSBpdGVtc09uUGFnZVswXS5xdWVyeVNlbGVjdG9yKCcuaXRlbV9pbWFnZScpLm9mZnNldFdpZHRoO1xuICAgICAgICBpbWFnZUhlaWdodCA9IChpdGVtV2lkdGgpIC8gMTQxICogMjEyO1xuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGl0ZW1zT25QYWdlLCBmdW5jdGlvbihlbGVtKXtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlbGVtKTtcbiAgICAgICAgICBsZXQgaW1hZ2UgPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy5pdGVtX2ltYWdlJyk7XG4gICAgICAgICAgaW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKyAncHgnO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1XaWR0aCA9IGl0ZW1zT25QYWdlWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICBpbWFnZUhlaWdodCA9IChpdGVtV2lkdGgpIC8gMTQxICogMjEyO1xuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGl0ZW1zT25QYWdlLCBmdW5jdGlvbihlbGVtKXtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlbGVtKTtcbiAgICAgICAgICBsZXQgaW1hZ2UgPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy5pdGVtX2ltYWdlJyk7XG4gICAgICAgICAgaW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKyAncHgnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnRpY2xlJykpIHtcbiAgICAgIGxldCBhcnRpY2xlSW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJ0aWNsZV9pbWFnZScpLFxuICAgICAgICAgIGltYWdlSGVpZ2h0LCBpbWFnZVdpZHRoO1xuICAgICAgaWYgKCAod2luZG93LmlubmVyV2lkdGggPCAxMDI0KSAmJiAod2luZG93LmlubmVyV2lkdGggPCB3aW5kb3cuaW5uZXJIZWlnaHQpICkge1xuICAgICAgICBpbWFnZVdpZHRoID0gYXJ0aWNsZUltYWdlLm9mZnNldFdpZHRoO1xuICAgICAgICBpbWFnZUhlaWdodCA9IChpbWFnZVdpZHRoKSAvIDE0MSAqIDIxMjtcbiAgICAgICAgY29uc29sZS5sb2coaW1hZ2VIZWlnaHQsIGltYWdlV2lkdGgpO1xuICAgICAgICBhcnRpY2xlSW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKyAncHgnO1xuICAgICAgICBhcnRpY2xlSW1hZ2UubmV4dEVsZW1lbnRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKS5zdHlsZS5tYXJnaW5Cb3R0b20gPSBpbWFnZUhlaWdodCArICdweCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbWFnZUhlaWdodCA9IGFydGljbGVJbWFnZS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGltYWdlV2lkdGggPSAoaW1hZ2VIZWlnaHQpIC8gMjEyICogMTQxO1xuICAgICAgICBhcnRpY2xlSW1hZ2Uuc3R5bGUud2lkdGggPSBpbWFnZVdpZHRoICsgJ3B4JztcbiAgICAgICAgYXJ0aWNsZUltYWdlLm5leHRFbGVtZW50U2libGluZy5zdHlsZS5sZWZ0ID0gaW1hZ2VXaWR0aCArICdweCc7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29weUxpbmsnKSkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvcHlMaW5rJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGxldCBkdW1teSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JyksXG4gICAgICAgICAgICB0ZXh0ID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkdW1teSk7XG4gICAgICAgIGR1bW15LnZhbHVlID0gdGV4dDtcbiAgICAgICAgZHVtbXkuc2VsZWN0KCk7XG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZHVtbXkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmV3IFN0YXJ0U2NyaXB0cygpO1xuXG4gIHdpbmRvdy5vbnJlc2l6ZSA9IFN0YXJ0U2NyaXB0cztcbn0pO1xuXG5cbi8vIC8vINCV0YHQu9C4INC00L7Qu9C20LXQvSDQsdGL0YLRjCDQvdCw0LnQtNC10L0g0L7QtNC40L0g0Y3Qu9C10LzQtdC90YJcbi8vIGlmKChlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtXCIpKSAhPT0gbnVsbClcbi8vICAgZS5jbGFzc0xpc3QuYWRkKCdsYXN0Jyk7IC8vINCQ0L3QsNC70L7QsyDQstGL0LHQvtGA0LrQuCDQuCDQv9GA0LjRgdCy0L7QtdC90LjRjyDQutC70LDRgdGB0LBcbi8vIC8vINCV0YHQu9C4INGN0LvQtdC80LXQvdGC0L7QsiDQsdGD0LTQtdGCINC80L3QvtCz0L5cbi8vIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNmb3JtXCIpLCBmdW5jdGlvbihlKXtcbi8vICAgZS5jbGFzc0xpc3QuYWRkKCdsYXN0Jyk7XG4vLyB9KTtcbiJdfQ==
