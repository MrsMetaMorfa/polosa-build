/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goriƒçar
 * Copyright 2019-2020. MIT licensed.
 */
document.addEventListener("DOMContentLoaded",function(){function e(){if(document.querySelector(".compilation")){let e,t,i=document.querySelectorAll(".item");window.innerWidth<1024&&window.innerWidth<window.innerHeight?(e=i[0].querySelector(".item_image").offsetWidth,t=e/141*212,Array.prototype.forEach.call(i,function(e){console.log(e),e.querySelector(".item_image").style.height=t+"px"})):(e=i[0].offsetWidth,t=e/141*212,Array.prototype.forEach.call(i,function(e){console.log(e),e.querySelector(".item_image").style.height=t+"px"}))}if(document.querySelector(".article")){let e,t,i=document.querySelector(".article_image");window.innerWidth<=1024&&window.innerWidth<window.innerHeight?(i.style.width="inherit",i.style.height="inherit",t=i.offsetWidth,e=i.offsetHeight,console.log(e,t),i.nextElementSibling.style.left=0,i.style.height=e+"px",i.nextElementSibling.querySelector(".header").style.marginBottom=e+"px"):window.innerWidth>1024&&window.innerWidth>window.innerHeight?(i.style.width="inherit",i.style.height="inherit",t=(e=i.offsetHeight)/212*141,i.nextElementSibling.querySelector(".header").style.marginBottom="inherit",i.style.width=t+"px",i.nextElementSibling.style.left=t+"px"):(i.style.width="inherit",i.style.height="inherit",e=i.offsetHeight,t=i.offsetWidth,i.nextElementSibling.querySelector(".header").style.marginBottom="inherit",i.style.width=t+"px",i.nextElementSibling.style.left=t+"px")}document.querySelector("#copyLink")&&document.querySelector("#copyLink").addEventListener("click",()=>{let e=document.createElement("input"),t=window.location.href;document.body.appendChild(e),e.value=t,e.select(),document.execCommand("copy"),document.body.removeChild(e)})}new e,window.onresize=e});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiU3RhcnRTY3JpcHRzIiwicXVlcnlTZWxlY3RvciIsIml0ZW1XaWR0aCIsImltYWdlSGVpZ2h0IiwiaXRlbXNPblBhZ2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwib2Zmc2V0V2lkdGgiLCJBcnJheSIsInByb3RvdHlwZSIsImZvckVhY2giLCJjYWxsIiwiZWxlbSIsImNvbnNvbGUiLCJsb2ciLCJzdHlsZSIsImhlaWdodCIsImltYWdlV2lkdGgiLCJhcnRpY2xlSW1hZ2UiLCJ3aWR0aCIsIm9mZnNldEhlaWdodCIsIm5leHRFbGVtZW50U2libGluZyIsImxlZnQiLCJtYXJnaW5Cb3R0b20iLCJkdW1teSIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwibG9jYXRpb24iLCJocmVmIiwiYm9keSIsImFwcGVuZENoaWxkIiwidmFsdWUiLCJzZWxlY3QiLCJleGVjQ29tbWFuZCIsInJlbW92ZUNoaWxkIiwib25yZXNpemUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0FBLFNBQUFDLGlCQUFBLG1CQUFBLFdBQ0EsU0FBQUMsSUFFQSxHQUFBRixTQUFBRyxjQUFBLGdCQUFBLENBQ0EsSUFBQUMsRUFBQUMsRUFBQUMsRUFBQU4sU0FBQU8saUJBQUEsU0FDQUMsT0FBQUMsV0FBQSxNQUFBRCxPQUFBQyxXQUFBRCxPQUFBRSxhQUNBTixFQUFBRSxFQUFBLEdBQUFILGNBQUEsZUFBQVEsWUFQQU4sRUFBQSxFQUFBLElBQUEsSUFDQU8sTUFBQUMsVUFBQUMsUUFBQUMsS0FBQVQsRUFBQSxTQUFBVSxHQUNBQyxRQUFBQyxJQUFBRixHQUNBQSxFQUFBYixjQUFBLGVBQ0FnQixNQUFBQyxPQUFBZixFQUFBLFNBR0FELEVBQUFFLEVBQUEsR0FBQUssWUFDQU4sRUFBQSxFQUFBLElBQUEsSUFDQU8sTUFBQUMsVUFBQUMsUUFBQUMsS0FBQVQsRUFBQSxTQUFBVSxHQUNBQyxRQUFBQyxJQUFBRixHQUNBQSxFQUFBYixjQUFBLGVBQ0FnQixNQUFBQyxPQUFBZixFQUFBLFFBS0EsR0FBQUwsU0FBQUcsY0FBQSxZQUFBLENBQ0EsSUFDQUUsRUFBQWdCLEVBREFDLEVBQUF0QixTQUFBRyxjQUFBLGtCQUVBSyxPQUFBQyxZQUFBLE1BQUFELE9BQUFDLFdBQUFELE9BQUFFLGFBQ0FZLEVBQUFILE1BQUFJLE1BQUEsVUFDQUQsRUFBQUgsTUFBQUMsT0FBQSxVQUNBQyxFQUFBQyxFQUFBWCxZQUNBTixFQUFBaUIsRUFBQUUsYUFDQVAsUUFBQUMsSUFBQWIsRUFBQWdCLEdBQ0FDLEVBQUFHLG1CQUFBTixNQUFBTyxLQUFBLEVBQ0FKLEVBQUFILE1BQUFDLE9BQUFmLEVBQUEsS0FDQWlCLEVBQUFHLG1CQUFBdEIsY0FBQSxXQUFBZ0IsTUFBQVEsYUFBQXRCLEVBQUEsTUFDQUcsT0FBQUMsV0FBQSxNQUFBRCxPQUFBQyxXQUFBRCxPQUFBRSxhQUNBWSxFQUFBSCxNQUFBSSxNQUFBLFVBQ0FELEVBQUFILE1BQUFDLE9BQUEsVUFFQUMsR0FEQWhCLEVBQUFpQixFQUFBRSxjQUNBLElBQUEsSUFDQUYsRUFBQUcsbUJBQUF0QixjQUFBLFdBQUFnQixNQUFBUSxhQUFBLFVBQ0FMLEVBQUFILE1BQUFJLE1BQUFGLEVBQUEsS0FDQUMsRUFBQUcsbUJBQUFOLE1BQUFPLEtBQUFMLEVBQUEsT0FFQUMsRUFBQUgsTUFBQUksTUFBQSxVQUNBRCxFQUFBSCxNQUFBQyxPQUFBLFVBQ0FmLEVBQUFpQixFQUFBRSxhQUNBSCxFQUFBQyxFQUFBWCxZQUNBVyxFQUFBRyxtQkFBQXRCLGNBQUEsV0FBQWdCLE1BQUFRLGFBQUEsVUFDQUwsRUFBQUgsTUFBQUksTUFBQUYsRUFBQSxLQUNBQyxFQUFBRyxtQkFBQU4sTUFBQU8sS0FBQUwsRUFBQSxNQUdBckIsU0FBQUcsY0FBQSxjQUNBSCxTQUFBRyxjQUFBLGFBQUFGLGlCQUFBLFFBQUEsS0FDQSxJQUFBMkIsRUFBQTVCLFNBQUE2QixjQUFBLFNBQ0FDLEVBQUF0QixPQUFBdUIsU0FBQUMsS0FFQWhDLFNBQUFpQyxLQUFBQyxZQUFBTixHQUNBQSxFQUFBTyxNQUFBTCxFQUNBRixFQUFBUSxTQUNBcEMsU0FBQXFDLFlBQUEsUUFDQXJDLFNBQUFpQyxLQUFBSyxZQUFBVixLQUtBLElBQUExQixFQUVBTSxPQUFBK0IsU0FBQXJDIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8g0JDQvdCw0LvQvtCzICQoZG9jdW1lbnQpLnJlYWR5KClcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gU3RhcnRTY3JpcHRzKCkge1xuXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb21waWxhdGlvbicpKSB7XG4gICAgICBsZXQgaXRlbXNPblBhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaXRlbScpLCBpdGVtV2lkdGgsIGltYWdlSGVpZ2h0O1xuICAgICAgaWYgKCh3aW5kb3cuaW5uZXJXaWR0aCA8IDEwMjQpICYmICh3aW5kb3cuaW5uZXJXaWR0aCA8IHdpbmRvdy5pbm5lckhlaWdodCkpIHtcbiAgICAgICAgaXRlbVdpZHRoID0gaXRlbXNPblBhZ2VbMF0ucXVlcnlTZWxlY3RvcignLml0ZW1faW1hZ2UnKS5vZmZzZXRXaWR0aDtcbiAgICAgICAgaW1hZ2VIZWlnaHQgPSAoaXRlbVdpZHRoKSAvIDE0MSAqIDIxMjtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChpdGVtc09uUGFnZSwgZnVuY3Rpb24oZWxlbSl7XG4gICAgICAgICAgY29uc29sZS5sb2coZWxlbSk7XG4gICAgICAgICAgbGV0IGltYWdlID0gZWxlbS5xdWVyeVNlbGVjdG9yKCcuaXRlbV9pbWFnZScpO1xuICAgICAgICAgIGltYWdlLnN0eWxlLmhlaWdodCA9IGltYWdlSGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtV2lkdGggPSBpdGVtc09uUGFnZVswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgaW1hZ2VIZWlnaHQgPSAoaXRlbVdpZHRoKSAvIDE0MSAqIDIxMjtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChpdGVtc09uUGFnZSwgZnVuY3Rpb24oZWxlbSl7XG4gICAgICAgICAgY29uc29sZS5sb2coZWxlbSk7XG4gICAgICAgICAgbGV0IGltYWdlID0gZWxlbS5xdWVyeVNlbGVjdG9yKCcuaXRlbV9pbWFnZScpO1xuICAgICAgICAgIGltYWdlLnN0eWxlLmhlaWdodCA9IGltYWdlSGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnRpY2xlJykpIHtcbiAgICAgIGxldCBhcnRpY2xlSW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJ0aWNsZV9pbWFnZScpLFxuICAgICAgICAgIGltYWdlSGVpZ2h0LCBpbWFnZVdpZHRoO1xuICAgICAgaWYgKCAod2luZG93LmlubmVyV2lkdGggPD0gMTAyNCkgJiYgKHdpbmRvdy5pbm5lcldpZHRoIDwgd2luZG93LmlubmVySGVpZ2h0KSApIHtcbiAgICAgICAgYXJ0aWNsZUltYWdlLnN0eWxlLndpZHRoID0gJ2luaGVyaXQnO1xuICAgICAgICBhcnRpY2xlSW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gJ2luaGVyaXQnO1xuICAgICAgICBpbWFnZVdpZHRoID0gYXJ0aWNsZUltYWdlLm9mZnNldFdpZHRoO1xuICAgICAgICBpbWFnZUhlaWdodCA9IGFydGljbGVJbWFnZS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGNvbnNvbGUubG9nKGltYWdlSGVpZ2h0LCBpbWFnZVdpZHRoKTtcbiAgICAgICAgYXJ0aWNsZUltYWdlLm5leHRFbGVtZW50U2libGluZy5zdHlsZS5sZWZ0ID0gMDtcbiAgICAgICAgYXJ0aWNsZUltYWdlLnN0eWxlLmhlaWdodCA9IGltYWdlSGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgYXJ0aWNsZUltYWdlLm5leHRFbGVtZW50U2libGluZy5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJykuc3R5bGUubWFyZ2luQm90dG9tID0gaW1hZ2VIZWlnaHQgKyAncHgnO1xuICAgICAgfSBlbHNlIGlmICgod2luZG93LmlubmVyV2lkdGggPiAxMDI0KSAmJiAod2luZG93LmlubmVyV2lkdGggPiB3aW5kb3cuaW5uZXJIZWlnaHQpKSB7XG4gICAgICAgIGFydGljbGVJbWFnZS5zdHlsZS53aWR0aCA9ICdpbmhlcml0JztcbiAgICAgICAgYXJ0aWNsZUltYWdlLnN0eWxlLmhlaWdodCA9ICdpbmhlcml0JztcbiAgICAgICAgaW1hZ2VIZWlnaHQgPSBhcnRpY2xlSW1hZ2Uub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBpbWFnZVdpZHRoID0gKGltYWdlSGVpZ2h0KSAvIDIxMiAqIDE0MTtcbiAgICAgICAgYXJ0aWNsZUltYWdlLm5leHRFbGVtZW50U2libGluZy5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJykuc3R5bGUubWFyZ2luQm90dG9tID0gJ2luaGVyaXQnO1xuICAgICAgICBhcnRpY2xlSW1hZ2Uuc3R5bGUud2lkdGggPSBpbWFnZVdpZHRoICsgJ3B4JztcbiAgICAgICAgYXJ0aWNsZUltYWdlLm5leHRFbGVtZW50U2libGluZy5zdHlsZS5sZWZ0ID0gaW1hZ2VXaWR0aCArICdweCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcnRpY2xlSW1hZ2Uuc3R5bGUud2lkdGggPSAnaW5oZXJpdCc7XG4gICAgICAgIGFydGljbGVJbWFnZS5zdHlsZS5oZWlnaHQgPSAnaW5oZXJpdCc7XG4gICAgICAgIGltYWdlSGVpZ2h0ID0gYXJ0aWNsZUltYWdlLm9mZnNldEhlaWdodDtcbiAgICAgICAgaW1hZ2VXaWR0aCA9IGFydGljbGVJbWFnZS5vZmZzZXRXaWR0aDtcbiAgICAgICAgYXJ0aWNsZUltYWdlLm5leHRFbGVtZW50U2libGluZy5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJykuc3R5bGUubWFyZ2luQm90dG9tID0gJ2luaGVyaXQnO1xuICAgICAgICBhcnRpY2xlSW1hZ2Uuc3R5bGUud2lkdGggPSBpbWFnZVdpZHRoICsgJ3B4JztcbiAgICAgICAgYXJ0aWNsZUltYWdlLm5leHRFbGVtZW50U2libGluZy5zdHlsZS5sZWZ0ID0gaW1hZ2VXaWR0aCArICdweCc7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29weUxpbmsnKSkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvcHlMaW5rJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGxldCBkdW1teSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JyksXG4gICAgICAgICAgICB0ZXh0ID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkdW1teSk7XG4gICAgICAgIGR1bW15LnZhbHVlID0gdGV4dDtcbiAgICAgICAgZHVtbXkuc2VsZWN0KCk7XG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZHVtbXkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmV3IFN0YXJ0U2NyaXB0cygpO1xuXG4gIHdpbmRvdy5vbnJlc2l6ZSA9IFN0YXJ0U2NyaXB0cztcbn0pO1xuXG5cbi8vIC8vINCV0YHQu9C4INC00L7Qu9C20LXQvSDQsdGL0YLRjCDQvdCw0LnQtNC10L0g0L7QtNC40L0g0Y3Qu9C10LzQtdC90YJcbi8vIGlmKChlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtXCIpKSAhPT0gbnVsbClcbi8vICAgZS5jbGFzc0xpc3QuYWRkKCdsYXN0Jyk7IC8vINCQ0L3QsNC70L7QsyDQstGL0LHQvtGA0LrQuCDQuCDQv9GA0LjRgdCy0L7QtdC90LjRjyDQutC70LDRgdGB0LBcbi8vIC8vINCV0YHQu9C4INGN0LvQtdC80LXQvdGC0L7QsiDQsdGD0LTQtdGCINC80L3QvtCz0L5cbi8vIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNmb3JtXCIpLCBmdW5jdGlvbihlKXtcbi8vICAgZS5jbGFzc0xpc3QuYWRkKCdsYXN0Jyk7XG4vLyB9KTtcbiJdfQ==
